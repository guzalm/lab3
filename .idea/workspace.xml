<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="9038c2ce-4ec4-4d79-86bb-807a899b0b55" name="Changes" comment="STEP 31: I checked peek() method. It shows the top element in the stack. Beside to queue, the top element is here that one, which added the later(4)." />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2OvQGr9gUDCDrEalZZMsVeC1qL1" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "WebServerToolWindowFactoryState": "false",
    "jdk.selected.JAVA_MODULE": "19",
    "last_opened_file_path": "C:/Users/acer/Downloads/RegistrationApp2/src/main/resources/com/example/registrationapp2/ass3ads",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="9038c2ce-4ec4-4d79-86bb-807a899b0b55" name="Changes" comment="" />
      <created>1682438486242</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1682438486242</updated>
      <workItem from="1682438487570" duration="742000" />
      <workItem from="1682685352185" duration="3648000" />
      <workItem from="1682751993153" duration="3806000" />
      <workItem from="1682867850123" duration="3995000" />
    </task>
    <task id="LOCAL-00001" summary="1.Created new class named MyLinkedListStack for the MyLinkedList implementation">
      <created>1682441149475</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1682441149475</updated>
    </task>
    <task id="LOCAL-00002" summary="1.Created new class named MyLinkedListStack for the MyLinkedList implementation">
      <created>1682441470804</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1682441470804</updated>
    </task>
    <task id="LOCAL-00003" summary="2.Here you can see that I added necessary class: java.util.EmptyStackException for the stack exceptions">
      <created>1682685464646</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1682685464646</updated>
    </task>
    <task id="LOCAL-00004" summary="3.I declared an instance variable &quot;list&quot;">
      <created>1682685917244</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1682685917244</updated>
    </task>
    <task id="LOCAL-00005" summary="4.There was created a constructor for the class and initialize the instance variable &quot;list&quot;&#10;inside MyLinkedListStack() by using &quot;new&quot; operator.">
      <created>1682686212067</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1682686212067</updated>
    </task>
    <task id="LOCAL-00006" summary="5.To implement the push method that adds an element to the top of the stack using the addFirst method for MyLinkedList in the MyLinkedListStack class, I added the code, by using the push() method takes an element of type T and adds it to the top of the stack using the addFirst() method of the list object.">
      <created>1682690102426</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1682690102426</updated>
    </task>
    <task id="LOCAL-00007" summary="5.To implement the push method that adds an element to the top of the stack using the addFirst method for MyLinkedList in the MyLinkedListStack class, I added the code, by using the push() method takes an element of type T and adds it to the top of the stack using the addFirst() method of the list object.">
      <created>1682690142433</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1682690142433</updated>
    </task>
    <task id="LOCAL-00008" summary="6. Here I created new method pop(), which will removes and returns the top element of the stack using the removeFirst method for MyLinkedList">
      <created>1682690470244</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1682690470244</updated>
    </task>
    <task id="LOCAL-00009" summary="STEP 6: Then I add return statement, which will remove first(top) element from stack. It works if list is not empty.">
      <created>1682752318627</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1682752318627</updated>
    </task>
    <task id="LOCAL-00010" summary="STEP 9: I added the peek method that returns the top element of the stack without removing it using the getFirst method for MyLinkedList.&#10;There is exception which works if stack is empty, If not, it calls getFirst() method.">
      <created>1682752984030</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1682752984030</updated>
    </task>
    <task id="LOCAL-00011" summary="STEP 10:  Here's the isEmpty() method implemented using the isEmpty() method of MyLinkedList to check if the stack is empty or not">
      <created>1682753194208</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1682753194208</updated>
    </task>
    <task id="LOCAL-00012" summary="STEP 11: I created the size() method simply calls the size() method of MyLinkedList and returns its result.">
      <created>1682753344378</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1682753344378</updated>
    </task>
    <task id="LOCAL-00013" summary="STEP 12: I just created new class MyLinkedListQueue&lt;T&gt; for the MyLinkedList implementation">
      <created>1682753591168</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1682753591168</updated>
    </task>
    <task id="LOCAL-00014" summary="STEP 13: There was imported the necessary classes: java.util.NoSuchElementException for the queue exceptions, and MyLinkedList">
      <created>1682753713824</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1682753713824</updated>
    </task>
    <task id="LOCAL-00015" summary="STEP 14: Declared an instance variable of type MyLinkedList inside the class. I used private variable &quot;list&quot;.">
      <created>1682753848514</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1682753848514</updated>
    </task>
    <task id="LOCAL-00016" summary="STEP 15: Created a constructor for the class and initialize the instance variable &quot;list&quot; by using new.">
      <created>1682753988545</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1682753988545</updated>
    </task>
    <task id="LOCAL-00017" summary="STEP 16: I implemented the enqueue method that adds an element to the back of the queue using the addLast method for MyLinkedList.">
      <created>1682754222887</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1682754222887</updated>
    </task>
    <task id="LOCAL-00018" summary="STEP 17: I implemented the dequeue method that removes and returns the front element of the queue using the removeFirst method for MyLinkedList. I used emptystackexception to throw if list is empty, if not, it returns method removeFirst() from mylinkedlist class.">
      <created>1682754415204</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1682754415204</updated>
    </task>
    <task id="LOCAL-00019" summary="STEP 18: Here is an implementation of the peek method that returns the front element of the queue without removing it using the getFirst method for MyLinkedList.  Also, it has exception as previous methods and if everything works, it returns getFirst() method from another class.">
      <created>1682754637780</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1682754637780</updated>
    </task>
    <task id="LOCAL-00020" summary="STEP 19: Implement the isEmpty method that returns true if the queue is empty or false if it is not using the isEmpty method for MyLinkedList">
      <created>1682754786554</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1682754786554</updated>
    </task>
    <task id="LOCAL-00021" summary="STEP 20: Then I implemented the size method that returns the number of elements in the queue using the size method for MyLinkedList.">
      <created>1682754952170</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1682754952170</updated>
    </task>
    <task id="LOCAL-00022" summary="STEP 21:The size() method is a common method found in many data structures, including linked lists. It is used to return the number of elements currently stored in the data structure.&#10;        &#10; In the case of the MyLinkedList class, the size() method simply returns the size instance variable, which keeps track of the number of elements currently stored in the linked list.">
      <created>1682755144312</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1682755144312</updated>
    </task>
    <task id="LOCAL-00023" summary="STEP 22: To my project I added Main class to check other 2 created classes. First of all, I want to start with MyLinkedListQueue, I declared new variable &quot;queue&quot;.">
      <created>1682755717701</created>
      <option name="number" value="00023" />
      <option name="presentableId" value="LOCAL-00023" />
      <option name="project" value="LOCAL" />
      <updated>1682755717701</updated>
    </task>
    <task id="LOCAL-00024" summary="STEP 23: In main I started checking methods of MyLinkedListQueue class. First one is &quot;isEmpty&quot; method. When we check is queue isEmpty, system prints &quot;true&quot; message, because we did not add anything to our queue.">
      <created>1682868418427</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1682868418427</updated>
    </task>
    <task id="LOCAL-00025" summary="STEP 24: To empty queue I added 3 elements by enqueue method to check is other methods work as size, dequeue, peek">
      <created>1682868892100</created>
      <option name="number" value="00025" />
      <option name="presentableId" value="LOCAL-00025" />
      <option name="project" value="LOCAL" />
      <updated>1682868892100</updated>
    </task>
    <task id="LOCAL-00026" summary="STEP 25: After adding element to queue, I reasked the system is queue is empty or not by isEmpty method, and answer is &quot;false&quot;, because queue has an element.">
      <created>1682869235243</created>
      <option name="number" value="00026" />
      <option name="presentableId" value="LOCAL-00026" />
      <option name="project" value="LOCAL" />
      <updated>1682869235243</updated>
    </task>
    <task id="LOCAL-00027" summary="STEP 26: The size method also works, because after adding one element, it prints that size of queue is 1.">
      <created>1682869394964</created>
      <option name="number" value="00027" />
      <option name="presentableId" value="LOCAL-00027" />
      <option name="project" value="LOCAL" />
      <updated>1682869394964</updated>
    </task>
    <task id="LOCAL-00028" summary="STEP 27: I added second element which is 2, and after used peek() method to check which element is in the top. System prints 1, because due to queue and LILO, first added element is in the top.">
      <created>1682870111238</created>
      <option name="number" value="00028" />
      <option name="presentableId" value="LOCAL-00028" />
      <option name="project" value="LOCAL" />
      <updated>1682870111238</updated>
    </task>
    <task id="LOCAL-00029" summary="STEP 28: To check dequeue method we used it and removed the first element from queue. To see the result, we also used peek() method and saw that second element is on the top now, because first was removed.">
      <created>1682870377257</created>
      <option name="number" value="00029" />
      <option name="presentableId" value="LOCAL-00029" />
      <option name="project" value="LOCAL" />
      <updated>1682870377257</updated>
    </task>
    <task id="LOCAL-00030" summary="STEP 29: Started to check is stack is empty by method isEmpty(). It prints true, because we did not add anything">
      <created>1682871303950</created>
      <option name="number" value="00030" />
      <option name="presentableId" value="LOCAL-00030" />
      <option name="project" value="LOCAL" />
      <updated>1682871303950</updated>
    </task>
    <task id="LOCAL-00031" summary="STEP 30: Here I check two methods push() and size(). Firstly, I added 4 elements to stack and checked the size. It prints 4, what says that methods work.">
      <created>1682871660652</created>
      <option name="number" value="00031" />
      <option name="presentableId" value="LOCAL-00031" />
      <option name="project" value="LOCAL" />
      <updated>1682871660652</updated>
    </task>
    <task id="LOCAL-00032" summary="STEP 31: I checked peek() method. It shows the top element in the stack. Beside to queue, the top element is here that one, which added the later(4).">
      <created>1682871859229</created>
      <option name="number" value="00032" />
      <option name="presentableId" value="LOCAL-00032" />
      <option name="project" value="LOCAL" />
      <updated>1682871859229</updated>
    </task>
    <option name="localTasksCounter" value="33" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="6. Here I created new method pop(), which will removes and returns the top element of the stack using the removeFirst method for MyLinkedList" />
    <MESSAGE value="STEP 6: Then I add return statement, which will remove first(top) element from stack. It works if list is not empty." />
    <MESSAGE value="STEP 9: I added the peek method that returns the top element of the stack without removing it using the getFirst method for MyLinkedList.&#10;There is exception which works if stack is empty, If not, it calls getFirst() method." />
    <MESSAGE value="STEP 10:  Here's the isEmpty() method implemented using the isEmpty() method of MyLinkedList to check if the stack is empty or not" />
    <MESSAGE value="STEP 11: I created the size() method simply calls the size() method of MyLinkedList and returns its result." />
    <MESSAGE value="STEP 12: I just created new class MyLinkedListQueue&lt;T&gt; for the MyLinkedList implementation" />
    <MESSAGE value="STEP 13: There was imported the necessary classes: java.util.NoSuchElementException for the queue exceptions, and MyLinkedList" />
    <MESSAGE value="STEP 14: Declared an instance variable of type MyLinkedList inside the class. I used private variable &quot;list&quot;." />
    <MESSAGE value="STEP 15: Created a constructor for the class and initialize the instance variable &quot;list&quot; by using new." />
    <MESSAGE value="STEP 16: I implemented the enqueue method that adds an element to the back of the queue using the addLast method for MyLinkedList." />
    <MESSAGE value="STEP 17: I implemented the dequeue method that removes and returns the front element of the queue using the removeFirst method for MyLinkedList. I used emptystackexception to throw if list is empty, if not, it returns method removeFirst() from mylinkedlist class." />
    <MESSAGE value="STEP 18: Here is an implementation of the peek method that returns the front element of the queue without removing it using the getFirst method for MyLinkedList.  Also, it has exception as previous methods and if everything works, it returns getFirst() method from another class." />
    <MESSAGE value="STEP 19: Implement the isEmpty method that returns true if the queue is empty or false if it is not using the isEmpty method for MyLinkedList" />
    <MESSAGE value="STEP 20: Then I implemented the size method that returns the number of elements in the queue using the size method for MyLinkedList." />
    <MESSAGE value="STEP 21:The size() method is a common method found in many data structures, including linked lists. It is used to return the number of elements currently stored in the data structure.&#10;        &#10; In the case of the MyLinkedList class, the size() method simply returns the size instance variable, which keeps track of the number of elements currently stored in the linked list." />
    <MESSAGE value="STEP 22: To my project I added Main class to check other 2 created classes. First of all, I want to start with MyLinkedListQueue, I declared new variable &quot;queue&quot;." />
    <MESSAGE value="STEP 23: In main I started checking methods of MyLinkedListQueue class. First one is &quot;isEmpty&quot; method. When we check is queue isEmpty, system prints &quot;true&quot; message, because we did not add anything to our queue." />
    <MESSAGE value="STEP 24: To empty queue I added 3 elements by enqueue method to check is other methods work as size, dequeue, peek" />
    <MESSAGE value="STEP 25: After adding element to queue, I reasked the system is queue is empty or not by isEmpty method, and answer is &quot;false&quot;, because queue has an element." />
    <MESSAGE value="STEP 26: The size method also works, because after adding one element, it prints that size of queue is 1." />
    <MESSAGE value="STEP 27: I added second element which is 2, and after used peek() method to check which element is in the top. System prints 1, because due to queue and LILO, first added element is in the top." />
    <MESSAGE value="STEP 28: To check dequeue method we used it and removed the first element from queue. To see the result, we also used peek() method and saw that second element is on the top now, because first was removed." />
    <MESSAGE value="STEP 29: Started to check is stack is empty by method isEmpty(). It prints true, because we did not add anything" />
    <MESSAGE value="STEP 30: Here I check two methods push() and size(). Firstly, I added 4 elements to stack and checked the size. It prints 4, what says that methods work." />
    <MESSAGE value="STEP 31: I checked peek() method. It shows the top element in the stack. Beside to queue, the top element is here that one, which added the later(4)." />
    <option name="LAST_COMMIT_MESSAGE" value="STEP 31: I checked peek() method. It shows the top element in the stack. Beside to queue, the top element is here that one, which added the later(4)." />
  </component>
</project>